//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CyberSource.Clients.NVPTransactionProcessor
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:schemas-cybersource-com:transaction-data:TransactionProcessor", ConfigurationName="CyberSource.Clients.NVPTransactionProcessor.INVPTransactionProcessor")]
    public interface INVPTransactionProcessor
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="runTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CyberSource.Clients.NVPTransactionProcessor.outputNVPMessageOut> runTransactionAsync(CyberSource.Clients.NVPTransactionProcessor.inputNVPMessageIn request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class inputNVPMessageIn
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:schemas-cybersource-com:transaction-data-1.170", Order=0)]
        public string nvpRequest;
        
        public inputNVPMessageIn()
        {
        }
        
        public inputNVPMessageIn(string nvpRequest)
        {
            this.nvpRequest = nvpRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class outputNVPMessageOut
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:schemas-cybersource-com:transaction-data-1.170", Order=0)]
        public string nvpReply;
        
        public outputNVPMessageOut()
        {
        }
        
        public outputNVPMessageOut(string nvpReply)
        {
            this.nvpReply = nvpReply;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface INVPTransactionProcessorChannel : CyberSource.Clients.NVPTransactionProcessor.INVPTransactionProcessor, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class NVPTransactionProcessorClient : System.ServiceModel.ClientBase<CyberSource.Clients.NVPTransactionProcessor.INVPTransactionProcessor>, CyberSource.Clients.NVPTransactionProcessor.INVPTransactionProcessor
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public NVPTransactionProcessorClient() : 
                base(NVPTransactionProcessorClient.GetDefaultBinding(), NVPTransactionProcessorClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.portNVP.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NVPTransactionProcessorClient(EndpointConfiguration endpointConfiguration) : 
                base(NVPTransactionProcessorClient.GetBindingForEndpoint(endpointConfiguration), NVPTransactionProcessorClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NVPTransactionProcessorClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NVPTransactionProcessorClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NVPTransactionProcessorClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NVPTransactionProcessorClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NVPTransactionProcessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CyberSource.Clients.NVPTransactionProcessor.outputNVPMessageOut> CyberSource.Clients.NVPTransactionProcessor.INVPTransactionProcessor.runTransactionAsync(CyberSource.Clients.NVPTransactionProcessor.inputNVPMessageIn request)
        {
            return base.Channel.runTransactionAsync(request);
        }
        
        public System.Threading.Tasks.Task<CyberSource.Clients.NVPTransactionProcessor.outputNVPMessageOut> runTransactionAsync(string nvpRequest)
        {
            CyberSource.Clients.NVPTransactionProcessor.inputNVPMessageIn inValue = new CyberSource.Clients.NVPTransactionProcessor.inputNVPMessageIn();
            inValue.nvpRequest = nvpRequest;
            return ((CyberSource.Clients.NVPTransactionProcessor.INVPTransactionProcessor)(this)).runTransactionAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.portNVP))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.portNVP))
            {
                return new System.ServiceModel.EndpointAddress("https://ics2wstest.ic3.com/commerce/1.x/transactionProcessor");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return NVPTransactionProcessorClient.GetBindingForEndpoint(EndpointConfiguration.portNVP);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return NVPTransactionProcessorClient.GetEndpointAddress(EndpointConfiguration.portNVP);
        }
        
        public enum EndpointConfiguration
        {
            
            portNVP,
        }
    }
}
